Changes between Mathopd 1.4 and Mathopd 1.5

cgi.c:

	All headers are now converted into HTTP_ environment
	variables, not just some. (With the exception that
	HTTP_CONTENT_LENGTH and HTTP_CONTENT_TYPE are not set,
	because these are already in other variables, and
	HTTP_AUTHORIZATION is not set if the user is
	authenticated by Mathopd.)

	Headers with the same name that occur multiple times
	in a request are now concatenated. Previous versions
	did not do this, which meant, for instance, that if
	two Cookie headers where received, one of those would
	be lost.

	The value of GATEWAY_INTERFACE is now set.
	If the user is authenticated by Mathopd, the value of
	AUTH_TYPE is set.

	The value of SERVER_NAME is set to the value of the
	Host: header sent by the client. This appears to make
	the most sense, especially for virtual servers that are
	created with "AnyHost".

	Do not allow scripts to run under the same user-id as
	ourselves. (Previously, we would not run a script if
	neither ScriptUser nor RunScriptAsOwner were set. But
	that does not catch cases where ScriptUser == User or
	other anomalies.)

	The setting of PATH_INFO and PATH_TRANSLATED is now
	independent on whether we run as a pure CGI program or
	an 'External' script. The SCRIPT_FILENAME variable now
	contains what would be in PATH_TRANSLATED for external
	scripts. This keeps php happy.

	External scripts can now be called with added command-line
	arguments.

	The DNS lookup code has been removed. This means that
	REMOTE_HOST will never be set.

	The ChildLog is now strftime-expanded, just like the
	other logs.

config.c:

	The following keywords have been added:-

		NumHeaders
		ExtraHeaders
		ScriptTimeout
		ScriptBufSize
		PathInfo
		AutoIndexCommand
		Backlog
		TimeTaken
		LocalAddress
		LocalPort
		MicroTime
		Clobber

	The following keywords have been removed:-

		DNSLookups
		Name

	The "Virtual" keyword may now be used in a global context
	as well. If used that way, the virtual server(s) that it
	defines will be inherited by all subsequent Server blocks.

	The value for the User parameter is now immediately checked
	at configuration time, and the user and group IDs are stored
	then. The ScriptUser gets a similar treatment. This means
	that after startup, no password lookups will be done (except
	perhaps for UserDirectory thingies.)

core.c:

	If connections are active, call poll() with a timeout
	of one minute, rather than infinity. This should take
	care of connections that remain stuck after shutdown.

	Do not poll server sockets or try to accept() if there is no
	room for any new connection. Previously mathopd would accept
	and then immediately drop a connection. That does not make
	a lot of sense. So we now let new connections hang in the air
	until an existing connection goes away or changes into a
	keep-alive state.

	Make a time stamp in the connection structure when a bona
	fide request appears. This can be used to log the time taken
	to process a request.

	The state machine that detects HTTP requests has been altered.
	If the first nonblank line contains a space (or tab) followed by
	the letter 'H', we are talking HTTP, and continue to scan the
	remainder of the input for request headers. Previously, HTTP
	is detected by a request line containing three or more words,
	which does not really work.

	The connections are now stored in several linked lists, rather
	than just one. This causes a significant speed increase,
	especially if the server is run with NumConnections set to a
	very high number. (It is not very efficient to loop over 1000
	idle connections every time.)

	As a side-effect of the above, if a connection comes in, and no
	free connections are available, mathopd clobbers the connection
	that has been idle for the longest period of time. Previously
	a more or less random connection would be clobbered.

	Mathopd will perform an 'internal dump' if a SIGWINCH signal is
	received. The dump will be written to /tmp/mathopd-PID-dump
	(where PID is the process ID of server). This is an experimental
	feature.

	On certain systems, Mathopd can use sendfile() to send the
	contents of a file to the client (at this moment this is known
	to work on FreeBSD-4 and Linux 2.4 systems.)

	Previous Mathopd versions would 'clobber' connections that are
	idle when it starts to run out of other connections. This
	behaviour can now be turned off using the Clobber keyword.

imap.c:

	Replace the strtok() function with something that is a
	little bit quicker.

	Limit imagemap files to 1000 lines or less, since processing
	these can be quite expensive in terms of CPU time.

log.c:

	New global function: open_log().

	We no longer log to standard error if the -n command-line
	option is set, because that interferes with the ChildLog
	for forked requests. To get the old behaviour, run Mathopd
	with the -t ('tee') option.

	Time stamps in the request log are more accurate.

main.c:

	If we are not running as a daemon, do not close all file
	descriptors.

	The fork_request function has been removed, since most of
	the work is now done in the main process (in cgi.c).
	Instead, we have a spawn() function, that forks, does a
	minimum amount of initialization routines, like change
	user-id, current directory, and so on, and then immediately
	calls exec. On some platforms we can even use vfork() rather
	than fork() to achieve a rather dramatic speedup.

	The second argument to the listen() call is now dynamic via
	the Backlog keyword.

request.c:

	Store all headers in the r->headers array (up to a maximum
	number, determined by NumHeaders.)

	Print extra headers, if defined by the ExtraHeaders keyword.

	Add satisfy_range(). In process_fd(), set the correct file
	offset if "Range" header is present in the request. Return
	200, 206 or 416 status based on range headers. Deal with "If-Range"
	headers. Added process_range_header(). Ignore (and log) multiple
	Range headers and requests for multiple ranges.

	Return 412 error for GET requests with If-Unmodified-Since header
	if applicable.

	Do not fold the Request-Line. That is, if the first line after
	the Request-Line ("GET / HTTP/1.1") starts with a space, do not
	treat it as a continuation of the Request-Line.

	Return a 400 rather than 404 error if a virtual server cannot be
	found. This is required by RFC2616.

	Allow requests with an absolute URI in the Request-Line
	("GET http://localhost/ HTTP/1.1").

	Store the value of Transfer-Encoding. Do not allow transfer-codings
	other than 'chunked'. If Content-Length is sent in addition to
	Transfer-Encoding, ignore the content-length.

	Return 411 error for POST requests without Content-Length.
	(Thus for the time being we refuse POST requests with a chunked
	message body.)

	If the AutoIndexCommand is set for a control block, execute that
	command if the request is for a directory and there is no index,
	as specified by IndexNames. (The command may be a CGI script or
	an External; it may even be a plain file, but that is probably
	not very useful.)

	The parsing of the Request-Line has changed. Rather than assuming
	that the last word of that line contains the HTTP version, scan
	the Request-Line for the string 'HTTP'.

	Request-URIs that are too long produce a 414 error.

	Close the connection upon receipt of a 'HTTP/0.9' request, that is,
	a request that does not contain a HTTP version. Thus, we now
	support HTTP/0.9 requests, in the sense that such requests are
	treated as an error. There are no HTTP/0.9 browsers left so this
	should not be a problem.

	The files specified by Error401File etc. can now be CGI scripts.

	Anything that is requested is now opened immediately. Previous
	versions would call stat() first, which is a time-consuming process.
	As a side-effect, all files that are served by Mathopd must now
	be readable, including compiled CGI programs.

	If the request included an "Expect: 100-continue" header, the
	client is apparently sending a request-body next, and no part
	of the request-body has been received, send a "100-continue"
	response. This is required by RFC2616.

	Mathopd now closes the connection after it has processed a
	GET or HEAD request that contained a message body. Previous
	versions would treat the message body as a new request.

stub.c:

	This is a new file that contains code to pass data from and to
	clients and CGI scripts. Originally this code was in the 'phpstub'
	program, but it has since been mutilated beyond all recognition.

sendfile.c:

	This is a new file. It contains hooks into the sendfile() function.

	The set_nopush function has been added. This function instructs
	the kernel to not send partial TCP segments until the response
	is finished. On FreeBSD this is done using the TCP_NOPUSH
	option; for Linux we use TCP_CORK.

	Note that set_nopush is currently enabled only if sendfile is
	used. This is done in order to send HTTP header and body in
	one TCP segment. Mathopd without sendfile does not need the
	function.

