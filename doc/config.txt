Keyword: AcceptMulti
Where:   Tuning
Type:    Flag
Default: On
Desc:    By default, Mathopd will try to accept more connections
         after it has accepted one, until the accept call indicates
         a blocking condition. When there is hardly any traffic,
         this means that an extra system call is made each time
         a connection comes in. If you don't want that behaviour,
         use this keyword to turn it off.

Keyword: Access
Where:   Control
Type:    Block
Default: Inherits from previous Access blocks
Desc:    The Access block can be used to allow or deny access to
         specific IP addresses. Mathopd has a default-allow policy,
         so if you have no Access blocks, access is allowed to anyone.
         If you do have Access blocks, make sure that you put the
         access entries in the correct order. Mathopd scans
         access blocks from the bottom up until a match is found.
         Example:

            Access {
              Deny 0/0
              Allow 127.0.0.1/32
            }

         This will allow access to 127.0.0.1, while denying access to
         anyone else.

Keyword: Address
Where:   Server
Type:    Address
Default: 0 (any address)
Desc:    If you want a server to listen on a specific address, rather
         than any address, use this keyword.
         Example:

           Server {
             Address 127.0.0.1
           }

Keyword: Admin
Where:   Control
Type:    String
Default: (none)
Desc:    The value of this keyword, if set, is displayed in HTTP error
         messages.

Keyword: Alias
Where:   Control
Type:    String
Desc:    Control blocks that contain an Alias keyword are used in
         URI-to-path translation. A block with an Alias keyword must
         have one or more Location keywords as well. Generally
         speaking, Mathopd scans Control blocks until it can match
         the directory part of the Request-URI with the alias.
         Scanning starts in the Virtual server and continues
         upwards. Scanning stops as soon as a match is found.

         Example:

           Control {
             Alias /
             Location /usr/share/doc/handbook
           }
           Control {
             Alias /boland
             Location /usr/home/boland/www
           }

         The above is an example of two aliases. Note that the order
         of the aliases matters: if you switch the two around, unexpected
         things will happen (the more specific alias will be obscured by
         the '/' alias.)

Keyword: Allow
Where:   Access
Type:    Network

Keyword: AllowDotfiles
Where:   Control
Type:    Flag
Default: Off
Desc:    Normally, Mathopd will not serve any file if any part of its
         pathname contains '/.', for security reasons.
         If the AllowDotFiles flag is set, there restrictions are lifted
         a bit, although constructions like '/./', '/../', etc. are
         still disallowed.

Keyword: AnyHost
Where:   Virtual
Desc:    If a virtual server has this keyword, it will match on any Host:
         header that is sent by the client. Other virtual servers that have
         an explicit Host name are still checked, so the 'AnyHost' virtual
         server will only be used as a last resort.

Keyword: Apply
Where:   Clients
Type:    Network

Keyword: BufSize
Where:   Tuning
Type:    Integer
Desc:    The server uses two buffers to store incoming and outgoing data.
         The size of the outgoing buffer is determined by the value of the
         BufSize keyword. The default value is 12288 (12Kbytes.)
         Larger buffers can lead to less system calls, but also increase the
         amount of memory used by the server process.

Keyword: BytesRead
Where:   LogFormat
Desc:    The number of octets (bytes) read from the client during a single
         request. Note that bytes read by CGI scripts and/or external
         programs are not counted.

Keyword: BytesWritten
Where:   LogFormat
Desc:    The number of octets (bytes) sent to the client during a single
         request. For non-CGI requests, this corresponds to the total size
         of the response headers plus the size of the response body,
         unless the HTTP transfer is interrupted, in which case this
         number will be the number of bytes transferred before the
         interruption occurs. For CGI/External requests, the value zero is
         logged, since Mathopd has no way of knowing how many bytes a child
         process transfers to a client.

Keyword: ChildLog
Where:   Control
Type:    String
Desc:    If a child process, such as a CGI script, writes a message to its
         standard error file descriptor (fd 2) it will end up in the file 
         designated by the ChildLog keyword. If no ChildLog is specified,
         error output is mixed with any other output from scripts.

Keyword: Clients
Where:   Control
Type:    Block
Desc:    This directive is similar to 'Access', except that it causes
         'conditional alias matching', rather than blocking traffic with
         '403 Forbidden' errors. As such, it is only useful when used in
         combination with Control blocks that contain an Alias. To distinguish
         a 'Clients' access list from a 'normal' access list, the keywords
         to be used inside the list are 'Apply' and 'NoApply', rather than
         'Allow' and 'Deny'.

         All this is perhaps best illustrated by an example.

           Control {
             Alias /
             Location /usr/share/doc/handbook
           }
           Control {
             Alias /
             Location /usr/share/doc/internal/handbook
             Clients {
               Apply 192.168.57.0/24
             }

         In this example, visitors from within the 192.168.57.0/24 network
         will get their content served from /usr/share/doc/internal/handbook,
         whereas other clients will see /usr/share/doc/handbook. Note that
         the order of the control blocks matters. If you put the unconditional
         alias at the bottom, rather than at the top, it will be matched first
         by the server, thus occluding the conditional alias.

Keyword: ContentLength
Where:   LogFormat
Desc:    The total size of the resource requested by the client.

Keyword: Control
Where:   Global, Server, Virtual
Type:    Block
Desc:    The 'Control' keyword starts a so-called control block. As the name
         suggests, it controls the behaviour of the server. In fact the
         keyword itself does not do very much; the directives inside the
         control block do all the work.

         Unless the block contains an Alias directive, settings that are
         specified inside a control block are inherited by all next blocks
         that are on an equal or lower level.

         Control blocks can appear at three different levels. Control bocks
         that appear at the 'top' level in the configuration file are called
         global control blocks. Next, one can put control blocks inside
         Server blocks. The settings defined there are local to that specific
         server. And finally one can have control blocks inside Virtual
         blocks. These blocks are on the lowest level.

         Usually a configuration file is made up of one very large global
         control block, followed by a bunch of Virtual servers that each
         contain a small control block, mostly containing just an Alias and
         a Location directive.

Keyword: CoreDirectory
Where:   Global
Type:    String
Desc:    Normally, for practical reasons, the server changes its current
         directory to the root directory "/". If this is undesirable for
         whatever reason, you can specify an alternate directory here.
         As a side effect, if mathopd dumps core for whatever reason, the
         core file will be in this directory. Actually if the server is
         started by root it will never dump core for security reasons, so
         this feature is a bit useless.

Keyword: Ctime
Where:   LogFormat
Desc:    The current time in 'C' format (e.g. Sun Mar 30 21:44:52 2003.)

Keyword: DNSLookups
Where:   Control
Type:    Flag
Default: On
Desc:    By default, when processing CGI scripts and external programs,
         mathopd will do a reverse DNS lookup to retrieve the fully
         qualified domain name of the client. That name, if found, is
         then passed to child processes via the REMOTE_HOST environment
         variable. If this behaviour is not wanted, you can turn it off
         by doing somehing like this at the start of the config file.

           Control {
             DNSLookups Off
           }

Keyword: Deny
Where:   Access
Type:    Network

Keyword: EncryptedUserFile
Where:   Control
Type:    Flag
Default: Off

Keyword: Error401File
Where:   Control
Type:    String

Keyword: Error403File
Where:   Control
Type:    String

Keyword: Error404File
Where:   Control
Type:    String

Keyword: ErrorLog
Where:   Global
Type:    String

Keyword: ExactMatch
Where:   Control
Type:    Flag
Desc:    The ExactMatch causes an Alias to be used only if it matches the
         request-URI exactly. This is rather a hack. It was originally
         designed to disallow users more than one html page per web site.
         The way this is done is as follows

           Control {
             IndexNames { index.html }
             Types {
               text/html { html htm }
           [...]
          
           Virtual {
             Host www.another.example
             Control {
               Alias /
               Location /var/www/www.another.example
               Specials {
                 Dummy { html htm }
               }
             }
             Control {
               Alias /
               Location /var/www/www.another.example
               ExactMatch On
             }
         
         Now if someone requests http://www.another.example/, the alias
         will match exactly, so the control block at the bottom will be
         in effect. On the other hand, if a request is made for, say,
         http://www.another.example/foo.html, the alias will not match
         exactly, so the second control block from the bottom will be used.
         This control block overrides the type declaration for html and htm
         extensions, effectively hiding these files, even if they were to
         exist physically. Note that files with extensions other than html
         and htm are processed normally, so that you can for example still
         have things like images on your home page.

Keyword: Export
Where:   Control
Type:    Block

Keyword: External
Where:   Control
Type:    Block

Keyword: Host
Where:   Virtual
Type:    String

Keyword: IndexNames
Where:   Control
Type:    Block

Keyword: InputBufSize
Where:   Tuning
Type:    Integer
Default: 2048

Keyword: Location
Where:   Control
Type:    String
Desc:    The Location keyword is used in combination with the Alias keyword.
         There are two types of locations: physical locations and 'redirects'.
         A physicial location is anything that starts with a slash ('/'),
         a redirect is anything else.
         When mathopd processes a request, the Alias that matches the
         Request-URI sent by the client is replaced with its corresponding
         location. For example, in the following situation

           Control {
             Alias /doc
             Location /usr/share/doc/handbook
           }

         when a client requests a URI '/doc/x11.html', the server will
         send the contents of /usr/share/doc/handbook/x11.html.
         When the location is a redirect, the server will send a HTTP
         '302' status response, which should cause the client to redirect
         to the desired location. Example:

           Control {
             Alias /secure
             Location https://an.example
           }

         In this example, when a client request a URI '/secure/test.html',
         the server will redirect the client to 'https://an.example/text.html'.

         More than one Location keywords can be used with one alias. Mathopd
         will rotate the locations on a round-robin bases. Example:

           Control {
             Alias /download
             Location http://mirror1.an.example/download
             Location http://mirror2.an.example/download
             Location http://mirror3.an.example/download
           }

         The first client that request something under /download will be
         redirected to mirrior1.an.example, the second client to mirror2,
         the third to mirror3, the fourth to mirror1, and so on.

Keyword: Log
Where:   Global
Type:    String
Desc:    This keyword determines where the access log is stored. The
         server creates one and only one access log, regardless of the
         number of (virtual) servers. The log file must be writeable
         by the user the server runs as. If no log file exists, Mathopd
         will try to create one. In that case, the server must also have
         write access to the directory that will contain the log file.
         There are some hacks that make it easier to maintain logs
         for distinct time periods. Before Mathopd tries to open the
         log file, it will expand any '%' constructs in the log file
         name, similar to date(1) and strftime(3). For example, if

           Log /var/mathopd/log.%Y%m%d

         is used, Mathopd will expand the %Y, %m and %d in the file
         name, to something like /var/mathopd/log.20020831
         Mathopd automatically rotates the log file every hour.
         If during this process Mathopd cannot create a new log file
         for any reason, it will continue to append to the old log.
         The format of the access log is determined by whatever is
         specified in the LogFormat block (see below.)

Keyword: LogFormat
Where:   Global
Type:    Block
Desc:    This keyword determines the order in which items are written into
         the log file. Each line of the log file consists of some tab-
         separated fields. The contents of each field is determined by
         whatever is inside the LogFormat block. For example, if the
         following is specified

           LogFormat { CTime URI }

         the first field in the log file corresponds to the date and time
         of the request, and the second field corresponds to the client's
         request-URI at that time.

         The default field order for the log is as follows.

           Ctime
           RemoteUser
           RemoteAddress
           RemotePort
           ServerName
           Method
           Uri
           Status
           ContentLength
           Referer
           UserAgent
           BytesRead
           BytesWritten

         In addition to the above, the fields Version and QueryString are
         available for logging.

Keyword: LogGMT
Where:   Global
Type:    Flag
Default: Off
Desc:    Normally time stamps in log files are in local time. If
         LogGMT is set to 'On', time stamps are in GMT. Note that
         this setting also affects naming of log files when
         '%' constructions are used. (See the 'Log' keyword.)

Keyword: Method
Where:   LogFormat
Desc:    The client's request-method, usually GET.

Keyword: Name
Where:   Server
Type:    String
Desc:    The value of this parameter is passed to CGI programs in the
         SERVER_NAME environment variable, if no match is found for a
         virtual server using Host headers.

Keyword: NoApply
Where:   Clients
Type:    Network

Keyword: NoHost
Where:   Virtual
Desc:    A Virtual server that has the "NoHost" keyword will be used when
         no Host header is sent by the client.

Keyword: NumConnections
Where:   Tuning
Type:    Integer
Default: 64
Desc:    The NumConnections parameter is the #1 tunable for Mathopd. It
         determines how many simultaneous requests can be handled.
         The default is probably too low for high-traffic systems.
         Mathopd uses a fixed block of memory for each connection, so
         the higher you set this tunable, the more memory the server
         will use.

Keyword: PIDFile
Where:   Global
Type:    String
Desc:    The PIDFile keyword specifies a file in which the server will
         record its process ID, for tracking purposes.

Keyword: PathArgs
Where:   Control
Type:    Flag
Desc:    If you want to redirect a user to a different web site, regardless
         of the actual URL that is requested, you can do something like this

           Control {
             Alias /foo
             Location http://www.an.example/foo.html
             PathArgs On
           }

         In the above example, a request for, say, /foo/index.html will be
         redirected to http://www.an.example/foo.html. In fact, *any* request
         that starts with /foo/ will be redirected to the same URL. If the
         PathArgs were omitted a request for /foo/index.html would be
         redirected to http://www.an.example/foo.html/index.html (which does
         not make much sense of course.)

Keyword: Port
Where:   Server
Type:    Integer
Default: 80
Desc:    If you want Mathopd to run a server on a different port, rather
         than the default for http, which is port 80, use a Port declaration.
         Example:

           Server {
             Port 8080
           }

Keyword: PutEnv
Where:   Control
Type:    Block

Keyword: QueryString
Where:   LogFormat
Desc:    The query string (the part that follows the '?' in the request-URI)
         if present.

Keyword: Realm
Where:   Control
Type:    String

Keyword: Referer
Where:   LogFormat
Desc:    The value of the 'Referer:' header sent by the client. Sometimes
         this refers to a URL that contains a link to the current request.

Keyword: RemoteAddress
Where:   LogFormat
Desc:    The Internet Address of the client.

Keyword: RemotePort
Where:   LogFormat
Desc:    The port number at the client's end of its connection to the server.

Keyword: RemoteUser
Where:   LogFormat
Desc:    The username sent by the client for a request that needs
         authorization and has successfully authenticated.

Keyword: RootDirectory
Where:   Global
Type:    String

Keyword: RunScriptsAsOwner
Where:   Control
Type:    Flag
Default: Off

Keyword: ScriptUser
Where:   Control
Type:    String

Keyword: Server
Where:   Global
Type:    Block

Keyword: ServerName
Where:   LogFormat
Desc:    The value of the 'Host:' header sent by the client (more or less.)

Keyword: Specials
Where:   Control
Type:    Block

Keyword: Status
Where:   LogFormat
Desc:    The three-digit HTTP status code for this request. Requests that
         are passed to CGI/External programs are marked with status "---".

Keyword: StayRoot
Where:   Global
Type:    Flag
Default: Off

Keyword: Timeout
Where:   Tuning
Type:    Integer
Default: 60

Keyword: Tuning
Where:   Global
Type:    Block

Keyword: Types
Where:   Control
Type:    Block

Keyword: Umask
Where:   Global
Type:    Integer
Default: 022

Keyword: Uri
Where:   LogFormat
Desc:    The URI requested by the client (minus query string, if present.)

Keyword: User
Where:   Global
Type:    String

Keyword: UserAgent
Where:   LogFormat
Desc:    The value of the 'User-Agent:' header sent by the client. This may,
         or may not, contain a string that can identify a web browser.

Keyword: UserDirectory
Where:   Control
Type:    Flag

Keyword: UserFile
Where:   Control
Type:    String

Keyword: Version
Where:   LogFormat
Desc:    The HTTP version requested by the client.

Keyword: Virtual
Where:   Server
Type:    Block
Desc:    The 'Virtual' keyword starts a virtual server block.
