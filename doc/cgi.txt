Mathopd and CGI

Normally, a CGI script looks a bit like this

  #!/usr/bin/perl
  print "Content-type: text/html\n\n"

It is the task of a web server to convert the header lines that are
output by a CGI script into something that a browser can understand.
Mathopd cannot do this at the moment. The main reason for this is
that Mathopd was never really designed with CGI in mind.

It is possible to run CGI scripts with Mathopd, with a few alterations.

Firstly, a script like the one above can be rewritten as follows

  #!/usr/bin/perl
  print "HTTP/1.1 200 OK\r\nContent-type: text/html\r\n\r\n"

(i.e.: insert a line "HTTP/1.1 200 OK" and replace all bare newlines
with carriage return+newlines.)

Alternatively, if this is not an option, you can run the script through
a stub program that converts the header lines itself.

There are two methods to enable Mathopd to run CGI scripts.

The first method is the `old-fashioned' /cgi-bin method, where one
directory is dedicated to CGI scripts. This can be implemented the
following way:-

  Control {
    Alias /cgi-bin
    Location /var/www/cgi-bin
    Specials {
      CGI { * }
    }
  }

Usually, CGI scripts are really just interpreted lines of program text,
like a PHP or Perl script. Mathopd has another mechanism to deal with
these which is far more flexible than the above. It works like this:

  Control {
    External {
      /usr/bin/perl { pl }
    }
  }

If things are set up this way, any file with extension .pl will
automatically be treated as a CGI script, and /usr/bin/perl will be
launched to interpret it. A side effect of this is that the script in
question does not have to be executable, so no messing about with
chmod is necessary.

As stated above, script output can be passed through a stub to create
header lines that comply with HTTP. One such stub is phpstub, which is
available at the Mathopd web site. To use php scripts in this fashion,
use something like this:-

  Control {
    External {
      /usr/local/libexec/phpstub { php }
    }
  }
